#include "DataSourceContainer.h"
///--------------------------------------------------------------------------------------



///--------------------------------------------------------------------------------------
using namespace DataSource;
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// Constructor
/// 
/// 
///--------------------------------------------------------------------------------------
ADataSourceContainer :: ADataSourceContainer ()
{


}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// Destructor
/// 
/// 
///--------------------------------------------------------------------------------------
ADataSourceContainer :: ~ADataSourceContainer ()
{


}
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// количество элементов в контейнере
/// 
/// 
///--------------------------------------------------------------------------------------
int ADataSourceContainer :: count() const
{
	return mDatas.count();
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// возвратим данные в контейнере
/// 
/// 
///--------------------------------------------------------------------------------------
PDataSource ADataSourceContainer :: item(const int index)
{
	if (index < 0 || index >= mDatas.count())
	{
		return PDataSource();
	}
	return mDatas[index];
}
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// добовляем данныех
/// 
/// 
///--------------------------------------------------------------------------------------
void ADataSourceContainer :: append(const PDataSource &data)
{
	if (data.isNull())
	{
		return;
	}

	mDatas.append(data);
	emit signal_change();
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// изменение данных
/// 
/// 
///--------------------------------------------------------------------------------------
void ADataSourceContainer :: slot_change(const ADataSource* data)
{
	emit signal_change();
}