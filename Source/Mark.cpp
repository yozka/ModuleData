#include "Mark.h"
#include <QVariant>
#include <QTime>
#include <QDateTime>

#include "Marking.h"
#include "TimeTicker.h"
///--------------------------------------------------------------------------------------



///--------------------------------------------------------------------------------------
using namespace Chart;
///--------------------------------------------------------------------------------------









 ///=====================================================================================
///
/// Constructor
/// 
/// 
///--------------------------------------------------------------------------------------
AMark :: AMark (const Marking::PWMarking &marking)
	:
	mRoot(true),
	mTime(0.0f),
	mValue(0.0f),
	mMarking(marking)
{

}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// Constructor
/// 
/// 
///--------------------------------------------------------------------------------------
AMark :: AMark (const double time, const double value, const Marking::PWMarking &marking)
	:
	mRoot(false),
	mTime(time),
	mValue(value),
	mMarking(marking)
{

}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// Destructor
/// 
/// 
///--------------------------------------------------------------------------------------
AMark :: ~AMark ()
{

}
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// возвратим указатель на метку 
/// 
/// 
///--------------------------------------------------------------------------------------
Marking::PWMarking AMark :: marking() const
{
	return mMarking;
}
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// возратим описание
/// 
/// 
///--------------------------------------------------------------------------------------
QString AMark :: description() const
{
	if (mMarking.isNull())
	{
		return "<unknow>";
	}
	return mMarking.data()->description();
}
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// время
/// 
/// 
///--------------------------------------------------------------------------------------
QString AMark :: timeToString() const
{
	/*QTime time(0,0,0);
	time = time.addMSecs(mTime);
	return time.toString("HH:mm:ss:zzz");
	*/
	return ATimeTicker::timeToString(mTime);
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// время
/// 
/// 
///--------------------------------------------------------------------------------------
double AMark :: time() const
{
	return mTime;
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// значение
/// 
/// 
///--------------------------------------------------------------------------------------
QString AMark :: valueToString() const
{
	return QString::number(mValue);
}
///--------------------------------------------------------------------------------------



 ///=====================================================================================
///
/// значение
/// 
/// 
///--------------------------------------------------------------------------------------
double AMark :: value() const
{
	return mValue;
}
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// возвратим, это корневая ссылка или нет
/// 
/// 
///--------------------------------------------------------------------------------------
bool AMark :: isRoot() const
{
	return mRoot;
}
///--------------------------------------------------------------------------------------


