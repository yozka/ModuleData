#include "CollectionProxy.h"
#include "DataProxy.h"
///--------------------------------------------------------------------------------------



///--------------------------------------------------------------------------------------
using namespace DataProxy;
///--------------------------------------------------------------------------------------










 ///=====================================================================================
///
/// Constructor
/// 
/// 
///--------------------------------------------------------------------------------------
ACollectionProxy :: ACollectionProxy (IInterface_receiv *parent)
	:
	mParent(parent)
{

}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// Destructor
/// 
/// 
///--------------------------------------------------------------------------------------
ACollectionProxy :: ~ACollectionProxy ()
{
	disconnectAll();
}
///--------------------------------------------------------------------------------------










 ///=====================================================================================
///
/// 
/// 
/// 
///--------------------------------------------------------------------------------------
bool ACollectionProxy :: connect(const QSharedPointer<ADataProxy> &dataProxy)
{
	if (dataProxy.isNull())
	{
		return false;
	}

	if (mDataProxy.contains(dataProxy))
	{
		return true;
	}

	mDataProxy.append(dataProxy);
	return dataProxy->connect(sharedFromThis());
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// отключаем источник данных
/// 
/// 
///--------------------------------------------------------------------------------------
bool ACollectionProxy :: disconnect(const QSharedPointer<ADataProxy> &dataProxy)
{
	if (!mDataProxy.contains(dataProxy))
	{
		return false;
	}
		
	auto old = PDataProxy(dataProxy);
	mDataProxy.removeAll(dataProxy);
	old->disconnect();
	return true;
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// отключим все соеденения
/// 
/// 
///--------------------------------------------------------------------------------------
void ACollectionProxy :: disconnectAll()
{
	while (!mDataProxy.isEmpty())
	{
		disconnect(mDataProxy.last());
	}
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// команда начало сбора данных
/// 
/// 
///--------------------------------------------------------------------------------------
void ACollectionProxy :: command_dataBegin()
{
	for (auto item = mDataProxy.cbegin(); item != mDataProxy.cend(); ++item)
	{
		auto dataProxy = *item;
		if (dataProxy.isNull())
		{
			continue;
		}
		dataProxy->command_dataBegin();
	}
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// команда конец сбора данных
/// 
/// 
///--------------------------------------------------------------------------------------
void ACollectionProxy :: command_dataEnd()
{
	for (auto item = mDataProxy.cbegin(); item != mDataProxy.cend(); ++item)
	{
		auto dataProxy = *item;
		if (dataProxy.isNull())
		{
			continue;
		}
		dataProxy->command_dataEnd();
	}
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// передача данных
/// 
/// 
///--------------------------------------------------------------------------------------
void ACollectionProxy :: command_dataSend(const QVariant &value)
{
	for (auto item = mDataProxy.cbegin(); item != mDataProxy.cend(); ++item)
	{
		auto dataProxy = *item;
		if (dataProxy.isNull())
		{
			continue;
		}
		dataProxy->command_dataSend(value);
	}
}


