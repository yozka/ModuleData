#include "DSRandomGenerator.h"
#include <QVariant>
#include <QTime>
#include <QDateTime>

#include "DSRandomGeneratorDialog.h"
///--------------------------------------------------------------------------------------



///--------------------------------------------------------------------------------------
using namespace DataSource;
///--------------------------------------------------------------------------------------





///--------------------------------------------------------------------------------------
int gNumber = 0;
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// Constructor
/// 
/// 
///--------------------------------------------------------------------------------------
ARandomGenerator :: ARandomGenerator ()
	:
	mInterval(settings::interval),
	mTimer(nullptr),
	mBeginMs(0),
	mLastTime(0)
{
	gNumber++;
	mNumber = gNumber;
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// Destructor
/// 
/// 
///--------------------------------------------------------------------------------------
ARandomGenerator :: ~ARandomGenerator ()
{
	clear();
	delete mTimer;

	if (!mWidget.isNull())
	{
		mWidget->close();
	}
}
///--------------------------------------------------------------------------------------










 ///=====================================================================================
///
/// возвратим имя источника данных
/// 
/// 
///--------------------------------------------------------------------------------------
QString ARandomGenerator :: title() const
{
	return "Random generator - " + QString::number(mNumber);
}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// покажем диалог информации по источнику данных
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: show()
{
	if (mWidget.isNull())
	{
		mWidget = PRandomGeneratorDialog::create();
	}

	auto _this = qSharedPointerCast<ARandomGenerator>(sharedFromThis());
	mWidget->show(_this);
	//mWidget->show(PRandomGenerator());

}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// ктоо подсоеденился
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: onConnect()
{
	refreshWidget();
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// ктото отсоединлся
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: onDisconnect()
{
	refreshWidget();
}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// открытие данных
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: onOpen()
{
	if (mTimer == nullptr)
	{
		mTimer = new QTimer(this);
		connect(mTimer, &QTimer::timeout, this, &ARandomGenerator::update);
		
		qsrand(static_cast<uint>(QTime::currentTime().msec()));
	}

	mBeginMs = QDateTime::currentMSecsSinceEpoch();
	mLastTime = 0;
	mTimer->start(mInterval);
	refreshWidget();
}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// закрытие данных
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: onClose()
{
	if (mTimer != nullptr)
	{
		mTimer->stop();
	}
	mLastTime = 0;
	refreshWidget();
}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// обновление таймера
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: update()
{
	const int range = settings::max - settings::min;
	const int val = (qrand() % range) + settings::min;

	const int timeMs = QDateTime::currentMSecsSinceEpoch() - mBeginMs;
	mLastTime = timeMs;

	QList<int> data;
	data.append(timeMs);
	data.append(val);
	streamData->command_dataSend(QVariant::fromValue<QList<int>>(data));
	
	refreshWidget();
}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// возвратим интервал таймера
/// 
/// 
///--------------------------------------------------------------------------------------
int ARandomGenerator :: interval() const
{
	return mInterval;
}
///--------------------------------------------------------------------------------------




 ///=====================================================================================
///
/// установим интервал таймера
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: setInterval(const int value)
{
	if (value >= settings::intervalMin && value <= settings::intervalMax)
	{
		mInterval = value;
	}
	
}
///--------------------------------------------------------------------------------------




 ///=====================================================================================
///
/// возвратим последнее время
/// 
/// 
///--------------------------------------------------------------------------------------
int ARandomGenerator :: lastTimeMS() const
{
	return mLastTime;
}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// обновим виджет
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: refreshWidget()
{
	if (!mWidget.isNull())
	{
		mWidget->refresh();
	}
}