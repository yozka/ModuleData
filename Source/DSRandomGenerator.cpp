#include "DSRandomGenerator.h"
#include <QVariant>
#include <QTime>
///--------------------------------------------------------------------------------------



///--------------------------------------------------------------------------------------
using namespace DataSource;
///--------------------------------------------------------------------------------------





///--------------------------------------------------------------------------------------
int gNumber = 0;
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// Constructor
/// 
/// 
///--------------------------------------------------------------------------------------
ARandomGenerator :: ARandomGenerator ()
	:
	mInterval(1000),
	mTimer(nullptr)
{
	gNumber++;
	mNumber = gNumber;
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// Destructor
/// 
/// 
///--------------------------------------------------------------------------------------
ARandomGenerator :: ~ARandomGenerator ()
{
	close();
	delete mTimer;
}
///--------------------------------------------------------------------------------------










 ///=====================================================================================
///
/// возвратим имя источника данных
/// 
/// 
///--------------------------------------------------------------------------------------
QString ARandomGenerator :: title() const
{
	return "Random generator - " + QString::number(mNumber);
}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// покажем диалог информации по источнику данных
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: show()
{

}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// открытие данных
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: onOpen()
{
	if (mTimer == nullptr)
	{
		mTimer = new QTimer(this);
		connect(mTimer, &QTimer::timeout, this, &ARandomGenerator::update);
		
		qsrand(static_cast<uint>(QTime::currentTime().msec()));
	}

	mTimer->start(mInterval);
}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// закрытие данных
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: onClose()
{
	if (mTimer == nullptr)
	{
		return;
	}
	mTimer->stop();
}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// обновление таймера
/// 
/// 
///--------------------------------------------------------------------------------------
void ARandomGenerator :: update()
{
	int range = settings::max - settings::min;
	
	int val = (qrand() % range) + settings::min;

	streamData->command_dataSend(QVariant(val));
}


	