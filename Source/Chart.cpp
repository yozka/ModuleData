#include "Chart.h"
#include "ChartWidget.h"
#include "DataSource.h"
#include <QVariant>
///--------------------------------------------------------------------------------------



///--------------------------------------------------------------------------------------
using namespace Chart;
///--------------------------------------------------------------------------------------




///--------------------------------------------------------------------------------------
int gNumberChart = 0;
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// Constructor
/// 
/// 
///--------------------------------------------------------------------------------------
AChart :: AChart ()
		:
	streamData(DataProxy::PCollectionProxy(new DataProxy::ACollectionProxy(this))),
	mRun(false)
	
{
	gNumberChart++;
	mNumber = gNumberChart;

}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// Destructor
/// 
/// 
///--------------------------------------------------------------------------------------
AChart :: ~AChart ()
{
	clear();
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// возвратим название диаграмы
/// 
/// 
///--------------------------------------------------------------------------------------
QString AChart :: title() const
{
	return "Chart mn - " + QString::number(mNumber);
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// создание представление данных
/// 
/// 
///--------------------------------------------------------------------------------------
QWidget* AChart :: createWidget()
{
	auto *frame = new AChartWidget();
	connect(frame, &QObject::destroyed, this, &AChart::slot_destroyedWidget);

	frame->setMarking(mMarking);


	mWidgets.append(frame);
	return frame;
}
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// даление виджета
/// 
/// 
///--------------------------------------------------------------------------------------
void AChart :: slot_destroyedWidget(QObject *obj)
{
	auto frame = static_cast<AChartWidget*>(obj);
	if (frame != nullptr)
	{
		frame->clear();
		mWidgets.removeAll(frame);
	}
}
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// очистка всей диаграммы, уберание всех зависемостей
/// 
/// 
///--------------------------------------------------------------------------------------
void AChart :: clear()
{
	mMarking = Marking::PMarkingContainer();
	for(auto item = mWidgets.constBegin(); item != mWidgets.constEnd(); ++item)
	{
		(*item)->clear();
	}
	mWidgets.clear();

	if (mRun)
	{
		streamData->command_dataClose();
		mRun = false;
	}
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// установка действующих закладок
/// 
/// 
///--------------------------------------------------------------------------------------
void AChart :: setMarking(const Marking::PMarkingContainer &marking)
{
	mMarking = marking;
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// запуск сбора данных
/// 
/// 
///--------------------------------------------------------------------------------------
void AChart :: play()
{
	if (mRun)
	{
		return;
	}
	mRun = true;
	mDatas.reserve(1000 * 60 * 60);
	streamData->command_dataOpen();
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// приастоновка сбора данных
/// 
/// 
///--------------------------------------------------------------------------------------
void AChart :: pause()
{
	if (!mRun)
	{
		return;
	}
	streamData->command_dataClose();
	mRun = false;
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// перезапуск сбора данных
/// 
/// 
///--------------------------------------------------------------------------------------
void AChart :: stop()
{
	if (mRun)
	{
		streamData->command_dataClose();
		mRun = false;
	}

	//очистка всех буферов данных
	mDatas.clear();
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// прием данных
/// 
/// 
///--------------------------------------------------------------------------------------
void AChart :: command_dataReceive(const QVariant &value)
{
	if (!mRun)
	{
		return;
	}
	
	const auto ds = qvariant_cast<QList<int>>(value);
	if (ds.count() != 2)
	{
		return;
	}

	const int time = ds[0];
	const int data = ds[1];


	mDatas.append(data);

	//отошлем новую информацию всем виджетам
	refreshWidgets();
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// законнектился
/// 
/// 
///--------------------------------------------------------------------------------------
void AChart :: command_connect(IInterface_receiv *obj)
{
	const auto data = dynamic_cast<DataSource::ADataSource*>(obj);
	if (data == nullptr)
	{
		return;
	}

	QString title = data->title();

	refreshWidgets();
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// расконнектились
/// 
/// 
///--------------------------------------------------------------------------------------
void AChart :: command_disconnect ()
{
	if (mRun)
	{
		streamData->command_dataClose();
		mRun = false;
	}
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// расконнектились
/// 
/// 
///--------------------------------------------------------------------------------------
void AChart :: refreshWidgets()
{
	for(auto item = mWidgets.constBegin(); item != mWidgets.constEnd(); ++item)
		{
			(*item)->refresh(mDatas);
		}

}



