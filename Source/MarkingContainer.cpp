#include "MarkingContainer.h"
///--------------------------------------------------------------------------------------



///--------------------------------------------------------------------------------------
using namespace Marking;
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// Constructor
/// 
/// 
///--------------------------------------------------------------------------------------
AMarkingContainer :: AMarkingContainer ()
{

	//добавим тестовые значения
	append(PMarking(new AMarking(-200, "Test 1")));
	append(PMarking(new AMarking(-150, "Test 2")));
	append(PMarking(new AMarking(-100, "Test 3")));
	append(PMarking(new AMarking(-50, "Test 4")));
	append(PMarking(new AMarking( 50, "Test 5")));
	append(PMarking(new AMarking( 100, "Test 6")));
	append(PMarking(new AMarking( 150, "Test 7")));
	append(PMarking(new AMarking( 200, "Test 8")));


}
///--------------------------------------------------------------------------------------








 ///=====================================================================================
///
/// Destructor
/// 
/// 
///--------------------------------------------------------------------------------------
AMarkingContainer :: ~AMarkingContainer ()
{


}
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// количество элементов в контейнере
/// 
/// 
///--------------------------------------------------------------------------------------
int AMarkingContainer :: count() const
{
	return mMarkings.count();
}
///--------------------------------------------------------------------------------------







 ///=====================================================================================
///
/// возвратим данные в контейнере
/// 
/// 
///--------------------------------------------------------------------------------------
PMarking AMarkingContainer :: item(const int index)
{
	if (index < 0 || index >= mMarkings.count())
	{
		return PMarking();
	}
	return mMarkings[index];
}
///--------------------------------------------------------------------------------------






 ///=====================================================================================
///
/// добовляем данныех
/// 
/// 
///--------------------------------------------------------------------------------------
void AMarkingContainer :: append(const PMarking &marking)
{
	if (marking.isNull())
	{
		return;
	}

	mMarkings.append(marking);
	emit signal_change();
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// изменение данных
/// 
/// 
///--------------------------------------------------------------------------------------
void AMarkingContainer :: slot_change(const AMarking* marking)
{
	emit signal_change();
}
///--------------------------------------------------------------------------------------





 ///=====================================================================================
///
/// поиск меток, по данным
/// 
/// 
///--------------------------------------------------------------------------------------
PMarking AMarkingContainer :: find(const int data) const
{
	for (auto item = mMarkings.constBegin(); item != mMarkings.constEnd(); ++item)
	{
		const auto mark = *item;
		if (mark->isCheck(data))
		{
			return mark;
		}
	}
	return PMarking();
}
